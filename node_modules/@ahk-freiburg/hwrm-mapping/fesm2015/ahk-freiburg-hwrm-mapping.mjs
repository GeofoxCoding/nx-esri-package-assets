import * as i0 from '@angular/core';
import { InjectionToken, Component, ChangeDetectionStrategy, Inject, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import esriConfig from '@arcgis/core/config';
import WebMap from '@arcgis/core/WebMap';
import MapView from '@arcgis/core/views/MapView';

const MappingModuleConfigurationToken = new InjectionToken('MappingConfig');

class MapWindowComponent {
    constructor(config) {
        this.config = config;
    }
    ngOnInit() {
        // Consuming app can pass a local asset path otherwise assets will be
        // puled from CDN
        if (this.config.assetPath)
            esriConfig.assetsPath = this.config.assetPath;
        const webMap = new WebMap({
            basemap: "streets-vector"
        });
        const view = new MapView({
            container: 'map',
            map: webMap
        });
    }
}
MapWindowComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MapWindowComponent, deps: [{ token: MappingModuleConfigurationToken }], target: i0.ɵɵFactoryTarget.Component });
MapWindowComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.7", type: MapWindowComponent, selector: "hwrm-mapping-map-window", ngImport: i0, template: "<div id=\"map\"></div>", styles: ["#map{width:inherit;height:inherit}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MapWindowComponent, decorators: [{
            type: Component,
            args: [{ selector: 'hwrm-mapping-map-window', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div id=\"map\"></div>", styles: ["#map{width:inherit;height:inherit}\n"] }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Inject,
                        args: [MappingModuleConfigurationToken]
                    }] }];
    } });

class MappingModule {
    static forRoot(config) {
        return {
            ngModule: MappingModule,
            providers: [
                {
                    provide: MappingModuleConfigurationToken,
                    useValue: config
                }
            ]
        };
    }
}
MappingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MappingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
MappingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MappingModule, declarations: [MapWindowComponent], imports: [CommonModule], exports: [MapWindowComponent] });
MappingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MappingModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MappingModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [
                        MapWindowComponent
                    ],
                    exports: [
                        MapWindowComponent
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { MapWindowComponent, MappingModule };
//# sourceMappingURL=ahk-freiburg-hwrm-mapping.mjs.map
